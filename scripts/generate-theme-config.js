/* eslint-disable */
// @ts-expect-error TS errors are expected given its a .js file

const fs = require('fs');

function parseCSSTheme(cssContent) {
  // Extract the @theme block
  const themeMatch = cssContent.match(/@theme\s*{([^}]*)}/s);
  if (!themeMatch) {
    throw new Error('No @theme block found in CSS file');
  }

  const themeContent = themeMatch[1];

  // Parse CSS custom properties
  const variables = {};
  const lines = themeContent.split('\n');

  for (const line of lines) {
    const trimmed = line.trim();
    if (trimmed.startsWith('--') && trimmed.includes(':')) {
      const [property, value] = trimmed.split(':');
      const cleanProperty = property.trim().replace('--', '');
      const cleanValue = value.trim().replace(';', '');
      variables[cleanProperty] = cleanValue;
    }
  }

  return variables;
}

function organizeThemeVariables(variables) {
  const theme = {};

  for (const [key, value] of Object.entries(variables)) {
    const parts = key.split('-');

    if (parts[0] === 'font') {
      if (!theme.font) theme.font = {};
      theme.font[parts[1]] = value;
    } else if (parts[0] === 'color') {
      if (!theme.colors) theme.colors = {};
      const colorName = parts[1];
      const colorShade = parts[2];

      if (!theme.colors[colorName]) {
        theme.colors[colorName] = {};
      }
      theme.colors[colorName][colorShade] = value;
    } else if (parts[0] === 'breakpoint') {
      if (!theme.breakpoints) theme.breakpoints = {};
      theme.breakpoints[parts[1]] = value;
    } else {
      // Handle other custom properties
      if (!theme.custom) theme.custom = {};
      theme.custom[key] = value;
    }
  }

  return theme;
}

function generateTypeScriptContent(theme) {
  function formatObject(obj, indent = 0) {
    const spaces = '  '.repeat(indent);
    const entries = Object.entries(obj);

    if (entries.length === 0) return '{}';

    const formattedEntries = entries.map(([key, value]) => {
      const safeKey = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key) ? key : `"${key}"`;

      if (typeof value === 'object' && value !== null) {
        return `${spaces}  ${safeKey}: ${formatObject(value, indent + 1)}`;
      } else {
        return `${spaces}  ${safeKey}: "${value}"`;
      }
    });

    return `{\n${formattedEntries.join(',\n')}\n${spaces}}`;
  }

  return `//! Generated from @lemme/tailwind-config/styles.css @theme variables
//! So, do not edit this file manually, instead edit @theme variables, and use: pnpm run script:gen-theme-util

const theme = ${formatObject(theme)};

type Theme = typeof theme;
type Font = keyof typeof theme.font;
type Breakpoint = keyof typeof theme.breakpoints;

type StringKey<T> = Extract<keyof T, string>;
type StringOrNumberKey<T> = Extract<keyof T, string | number>;

type ColorGroup = StringKey<typeof theme.colors>;
type ColorGroupShade = {
  [K in StringKey<typeof theme.colors>]: {
    [S in StringOrNumberKey<(typeof theme.colors)[K]>]: \`\${K}-\${S}\`;
  }[StringOrNumberKey<(typeof theme.colors)[K]>];
}[StringKey<typeof theme.colors>];

function getColorValue(color: ColorGroupShade): string {
  const [group, shade] = color.split('-') as [ColorGroup, string];

  return theme.colors[group][
    shade as keyof (typeof theme.colors)[typeof group]
  ];
}

export {
  getColorValue,
  theme,
  type Breakpoint,
  type ColorGroup,
  type ColorGroupShade,
  type Font,
  type Theme,
};
`;
}

function generateCSSVarsFile(inputPath, outputPath) {
  try {
    // Read the CSS file
    const cssContent = fs.readFileSync(inputPath, 'utf8');

    // Parse theme variables
    const variables = parseCSSTheme(cssContent);

    // Organize into structured object
    const theme = organizeThemeVariables(variables);

    // Generate TypeScript content
    const tsContent = generateTypeScriptContent(theme);

    // Write to output file
    fs.writeFileSync(outputPath, tsContent);

    console.log(`‚úÖ Successfully generated ${outputPath}`);
    console.log(`üìä Extracted ${Object.keys(variables).length} CSS variables`);

    return theme;
  } catch (error) {
    console.error('‚ùå Error generating CSS vars file:', error.message);
    process.exit(1);
  }
}

// CLI usage
if (require.main === module) {
  const inputPath = './src/styles/globals.css';
  const outputPath = './src/styles/theme.ts';

  if (!fs.existsSync(inputPath)) {
    console.error(`‚ùå Input file not found: ${inputPath}`);
    process.exit(1);
  }

  generateCSSVarsFile(inputPath, outputPath);
}

module.exports = { generateCSSVarsFile, parseCSSTheme, organizeThemeVariables };
